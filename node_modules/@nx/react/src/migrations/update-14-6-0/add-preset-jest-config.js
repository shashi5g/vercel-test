"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addBabelJestPresetTransformerOption = void 0;
const devkit_1 = require("@nx/devkit");
const executor_options_utils_1 = require("@nx/devkit/src/generators/executor-options-utils");
const tsquery_1 = require("@phenomnomnominal/tsquery");
function addBabelJestPresetTransformerOption(tree) {
    (0, executor_options_utils_1.forEachExecutorOptions)(tree, '@nrwl/jest:jest', (options, project, target, configuration) => {
        if (options.jestConfig &&
            tree.exists(options.jestConfig) &&
            isReactProject(tree, (0, devkit_1.readProjectConfiguration)(tree, project))) {
            const oldConfig = tree.read(options.jestConfig, 'utf-8');
            const updatedConfig = tsquery_1.tsquery.replace(oldConfig, 'PropertyAssignment > StringLiteral[value="babel-jest"]', (node) => {
                return `['babel-jest', { presets: ['@nrwl/react/babel'] }]`;
            });
            tree.write(options.jestConfig, updatedConfig);
        }
    });
}
exports.addBabelJestPresetTransformerOption = addBabelJestPresetTransformerOption;
function isReactProject(tree, projectConfig) {
    const knownInvalidExecutors = [
        '@nrwl/next:build',
        '@nrwl/angular',
        '@angular-devkit/build-angular:browser',
        '@nrwl/js:tsc',
        '@nrwl/js:swc',
        '@nrwl/workspace:run-commands',
        'nx:run-commands',
        '@nrwl/node:webpack',
    ];
    if (knownInvalidExecutors.includes(projectConfig?.targets?.build?.executor) ||
        tree.exists((0, devkit_1.joinPathFragments)(projectConfig.root, 'next.config.js'))) {
        return false;
    }
    return true;
}
exports.default = addBabelJestPresetTransformerOption;
