"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.remoteGeneratorInternal = exports.remoteGenerator = exports.addModuleFederationFiles = void 0;
const path_1 = require("path");
const devkit_1 = require("@nx/devkit");
const normalize_options_1 = require("../application/lib/normalize-options");
const application_1 = require("../application/application");
const update_host_with_remote_1 = require("./lib/update-host-with-remote");
const update_module_federation_project_1 = require("../../rules/update-module-federation-project");
const setup_ssr_1 = require("../setup-ssr/setup-ssr");
const setup_ssr_for_remote_1 = require("./lib/setup-ssr-for-remote");
function addModuleFederationFiles(host, options) {
    const templateVariables = {
        ...(0, devkit_1.names)(options.name),
        ...options,
        tmpl: '',
    };
    (0, devkit_1.generateFiles)(host, (0, path_1.join)(__dirname, `./files/module-federation`), options.appProjectRoot, templateVariables);
}
exports.addModuleFederationFiles = addModuleFederationFiles;
async function remoteGenerator(host, schema) {
    return await remoteGeneratorInternal(host, {
        projectNameAndRootFormat: 'derived',
        ...schema,
    });
}
exports.remoteGenerator = remoteGenerator;
async function remoteGeneratorInternal(host, schema) {
    const tasks = [];
    const options = await (0, normalize_options_1.normalizeOptions)(host, schema, '@nx/react:remote');
    const initAppTask = await (0, application_1.default)(host, {
        ...options,
        // Only webpack works with module federation for now.
        bundler: 'webpack',
        skipFormat: true,
    });
    tasks.push(initAppTask);
    if (schema.host) {
        (0, update_host_with_remote_1.updateHostWithRemote)(host, schema.host, options.projectName);
    }
    // Module federation requires bootstrap code to be dynamically imported.
    // Renaming original entry file so we can use `import(./bootstrap)` in
    // new entry file.
    host.rename((0, path_1.join)(options.appProjectRoot, 'src/main.tsx'), (0, path_1.join)(options.appProjectRoot, 'src/bootstrap.tsx'));
    addModuleFederationFiles(host, options);
    (0, update_module_federation_project_1.updateModuleFederationProject)(host, options);
    if (options.ssr) {
        const setupSsrTask = await (0, setup_ssr_1.default)(host, {
            project: options.projectName,
            serverPort: options.devServerPort,
            skipFormat: true,
        });
        tasks.push(setupSsrTask);
        const setupSsrForRemoteTask = await (0, setup_ssr_for_remote_1.setupSsrForRemote)(host, options, options.projectName);
        tasks.push(setupSsrForRemoteTask);
        const projectConfig = (0, devkit_1.readProjectConfiguration)(host, options.projectName);
        projectConfig.targets.server.options.webpackConfig = (0, devkit_1.joinPathFragments)(projectConfig.root, 'webpack.server.config.js');
        (0, devkit_1.updateProjectConfiguration)(host, options.projectName, projectConfig);
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(host);
    }
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.remoteGeneratorInternal = remoteGeneratorInternal;
exports.default = remoteGenerator;
