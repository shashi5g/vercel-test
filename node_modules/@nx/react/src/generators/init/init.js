"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reactInitSchematic = exports.reactInitGenerator = void 0;
const devkit_1 = require("@nx/devkit");
const js_1 = require("@nx/js");
const versions_1 = require("../../utils/versions");
function setDefault(host) {
    const workspace = (0, devkit_1.readNxJson)(host);
    workspace.generators = workspace.generators || {};
    const reactGenerators = workspace.generators['@nx/react'] || {};
    const generators = {
        ...workspace.generators,
        '@nx/react': {
            ...reactGenerators,
            application: {
                ...reactGenerators.application,
                babel: true,
            },
        },
    };
    (0, devkit_1.updateNxJson)(host, { ...workspace, generators });
}
function updateDependencies(host, schema) {
    (0, devkit_1.removeDependenciesFromPackageJson)(host, ['@nx/react'], []);
    const dependencies = {
        react: versions_1.reactVersion,
        'react-dom': versions_1.reactDomVersion,
    };
    if (!schema.skipHelperLibs) {
        dependencies['tslib'] = versions_1.tsLibVersion;
    }
    return (0, devkit_1.addDependenciesToPackageJson)(host, dependencies, {
        '@nx/react': versions_1.nxVersion,
        '@types/node': versions_1.typesNodeVersion,
        '@types/react': versions_1.typesReactVersion,
        '@types/react-dom': versions_1.typesReactDomVersion,
        '@testing-library/react': versions_1.testingLibraryReactVersion,
    });
}
async function reactInitGenerator(host, schema) {
    const tasks = [];
    const jsInitTask = await (0, js_1.initGenerator)(host, {
        ...schema,
        tsConfigName: schema.rootProject ? 'tsconfig.json' : 'tsconfig.base.json',
        skipFormat: true,
    });
    tasks.push(jsInitTask);
    setDefault(host);
    if (!schema.e2eTestRunner || schema.e2eTestRunner === 'cypress') {
        (0, devkit_1.ensurePackage)('@nx/cypress', versions_1.nxVersion);
        const { cypressInitGenerator } = await Promise.resolve().then(() => require('@nx/cypress/src/generators/init/init'));
        const cypressTask = await cypressInitGenerator(host, {});
        tasks.push(cypressTask);
    }
    if (!schema.skipPackageJson) {
        const installTask = updateDependencies(host, schema);
        tasks.push(installTask);
    }
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
exports.reactInitGenerator = reactInitGenerator;
exports.default = reactInitGenerator;
exports.reactInitSchematic = (0, devkit_1.convertNxGenerator)(reactInitGenerator);
